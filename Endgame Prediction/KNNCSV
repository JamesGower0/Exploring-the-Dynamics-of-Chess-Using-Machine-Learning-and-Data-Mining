import os
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from imblearn.over_sampling import SMOTE
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, f1_score
import matplotlib.pyplot as plt
from sklearn.inspection import permutation_importance
from collections import Counter

# Folder containing CSV files
csv_folder = "LCG"

# Load all CSV files into a single DataFrame
csv_files = [os.path.join(csv_folder, f) for f in os.listdir(csv_folder) if f.endswith('.csv')]
df_list = [pd.read_csv(file) for file in csv_files]
df = pd.concat(df_list, ignore_index=True)

# Ensure relevant columns exist
df = df[['Opening', 'WhiteElo', 'BlackElo', 'Event', 'Result', 'Endgame', 'Date']]  # Update as necessary

df = df.dropna(subset=['Endgame'])  # Drop rows where 'endgame' is NaN

# Extract date components
df['Date'] = pd.to_datetime(df['Date'])
df['day'] = df['Date'].dt.day
df['month'] = df['Date'].dt.month
df['year'] = df['Date'].dt.year
df = df.drop(columns=['Date'])

# Label encode categorical columns
le_endgame = LabelEncoder()
df['Endgame'] = le_endgame.fit_transform(df['Endgame'])

le_result = LabelEncoder()
df['Result'] = le_result.fit_transform(df['Result'])

le_event = LabelEncoder()
df['Event'] = le_event.fit_transform(df['Event'])

le_opening = LabelEncoder()
df['Opening'] = le_opening.fit_transform(df['Opening'])

# Scale numerical columns
scaler = StandardScaler()
df[['WhiteElo', 'BlackElo', 'day', 'month', 'year']] = scaler.fit_transform(df[['WhiteElo', 'BlackElo', 'day', 'month', 'year']])

# Split the data into features and labels
X = df.drop('Endgame', axis=1)
y = df['Endgame']

# Check the class distribution before balancing
print("Class distribution before balancing:", Counter(y))

# Remove classes with fewer than a threshold number of samples
min_samples = 50
class_counts = y.value_counts()
valid_classes = class_counts[class_counts >= min_samples].index
X = X[y.isin(valid_classes)]
y = y[y.isin(valid_classes)]
print("Class distribution after filtering rare classes:", Counter(y))

# Balance classes using SMOTE
smote = SMOTE(random_state=69, k_neighbors=3)
X_balanced, y_balanced = smote.fit_resample(X, y)
print("Class distribution after balancing:", Counter(y_balanced))

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_balanced, y_balanced, test_size=0.2, random_state=69)

# Train a KNN model
knn_model = KNeighborsClassifier(n_neighbors=5)
knn_model.fit(X_train, y_train)

# Make predictions
y_pred = knn_model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred, average='weighted')
print(f'KNN Classifier Accuracy: {accuracy:.2f}')
print(f'KNN F1 Score (Weighted): {f1:.2f}')

'''
# Feature Importance using Permutation Importance
perm_importance = permutation_importance(knn_model, X_test, y_test, n_repeats=10, random_state=69)
importances = perm_importance.importances_mean
indices = importances.argsort()

# Plot Feature Importance
plt.figure(figsize=(16, 6))
plt.title('Feature Importances (Permutation Importance)')
plt.bar(range(len(indices)), importances[indices], align='center')
plt.xticks(range(len(indices)), [X.columns[i] for i in indices], rotation=90)
plt.xlabel('Features')
plt.ylabel('Importance')
plt.tight_layout()
plt.show()
'''