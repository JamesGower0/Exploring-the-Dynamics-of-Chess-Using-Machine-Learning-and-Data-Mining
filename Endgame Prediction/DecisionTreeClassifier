import cudf
import cupy as cp
from cuml.preprocessing import LabelEncoder, StandardScaler
from cuml.ensemble import RandomForestClassifier
from cuml.metrics import accuracy_score, f1_score
from cuml.dask.oversampling import SMOTE
import dask_cudf
from sqlalchemy import create_engine

# MySQL database configuration
db_config = {
    'username': 'root',
    'password': 'b5CaQ9WK2',
    'host': '127.0.0.1',
    'port': 3306,
    'database': 'chess'
}
connection_url = (
    f"mysql+pymysql://{db_config['username']}:{db_config['password']}@"
    f"{db_config['host']}:{db_config['port']}/{db_config['database']}"
)
engine = create_engine(connection_url)

# Optimized SQL query
query = """
SELECT 
    opening AS opening_name, 
    whiteelo AS WhiteElo, 
    blackelo AS BlackElo, 
    event AS Event, 
    result AS Result, 
    endgame, 
    DAY(date) AS day, 
    MONTH(date) AS month, 
    YEAR(date) AS year 
FROM games 
WHERE endgame IS NOT NULL AND endgame != 'endgame not reached'
"""

# Load data into GPU dataframe
df = dask_cudf.from_sql_table(query, con=engine).compute()

# Label Encoding
le = LabelEncoder()
df['endgame'] = le.fit_transform(df['endgame'])
df['Result'] = le.fit_transform(df['Result'])
df['Event'] = le.fit_transform(df['Event'])
df['opening_name'] = le.fit_transform(df['opening_name'])

# Standardize numerical features
scaler = StandardScaler()
df[['WhiteElo', 'BlackElo', 'day', 'month', 'year']] = scaler.fit_transform(
    df[['WhiteElo', 'BlackElo', 'day', 'month', 'year']]
)

# Features and labels
X = df.drop('endgame', axis=1)
y = df['endgame']

# Filter rare classes
class_counts = y.value_counts()
valid_classes = class_counts[class_counts >= 5].index
X = X[y.isin(valid_classes)]
y = y[y.isin(valid_classes)]

# Balance classes using SMOTE
smote = SMOTE(random_state=42)
X_balanced, y_balanced = smote.fit_resample(X, y)

# Split data
from cuml.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_balanced, y_balanced, test_size=0.2, random_state=42)

# Train GPU Decision Tree Classifier
dt_model = RandomForestClassifier(random_state=42)
dt_model.fit(X_train, y_train)

# Predictions and evaluation
y_pred = dt_model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred, average='weighted')

print(f'Decision Tree Accuracy: {accuracy:.2f}')
print(f'Decision Tree F1 Score (Weighted): {f1:.2f}')
