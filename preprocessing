import chess.pgn
import mysql.connector
import re

# MySQL connection settings
db_config = {
    'user': 'root',
    'password': 'b5CaQ9WK2',
    'host': '127.0.0.1',
    'database': 'chess'
}

# Connect to MySQL
conn = mysql.connector.connect(**db_config)
cursor = conn.cursor()

def clean_opening_name(opening_name):
    # Remove anything after a colon, e.g., "Alekhine Defense: 1.e4 Nf6" -> "Alekhine Defense"
    opening_name = re.sub(r":.*", "", opening_name)
    # Remove move notation, e.g., "1.e4 Nf6" -> ""
    opening_name = re.sub(r"\d+\.\s?[a-h1-8]+\s?[a-h1-8+]*", "", opening_name)
    # Remove numerical suffixes, e.g., "Alekhine Defense #2" -> "Alekhine Defense"
    opening_name = re.sub(r"#\d+", "", opening_name)
    # Remove excess whitespace and return the cleaned name
    return opening_name.strip()


def classify_endgame_with_names(game):
    """
    Classifies the game into a named endgame type based on the remaining pieces.
    """
    board = game.board()
    moves = list(game.mainline_moves())
    i = 0

    while i < len(moves):
        move = moves[i]
        board.push(move)

        # Count remaining pieces
        piece_counts = {}
        for piece in board.piece_map().values():
            piece_symbol = piece.symbol()
            piece_counts[piece_symbol] = piece_counts.get(piece_symbol, 0) + 1

        white_non_pawns = {piece: count for piece, count in piece_counts.items() if piece in "QRBN"}
        black_non_pawns = {piece: count for piece, count in piece_counts.items() if piece in "qrbn"}

        if sum(white_non_pawns.values()) <= 2 and sum(black_non_pawns.values()) <= 2:

            # Process traded pieces
            piece_counts = remove_traded_pieces(board, piece_counts, moves[i + 1:i + 7])

            # Clean up zero-count pieces
            piece_counts = clean_piece_counts(piece_counts)

            # Classify and return
            return generate_named_endgame(piece_counts)

        i += 1

    return "endgame not reached"


def clean_piece_counts(piece_counts):
    """
    Removes pieces with a count of 0 from the piece_counts dictionary.
    """
    return {piece: count for piece, count in piece_counts.items() if count > 0}


def remove_traded_pieces(board, piece_counts, moves):
    """
    Removes any captured pieces from piece_counts in the next 6 moves.
    If a capture chain extends beyond these moves, continue removing captured pieces until the chain ends.
    """
    temp_board = board.copy()
    capture_chain = []

    def is_capture_move(move):
        """Check if a move is a capture."""
        return 'x' in temp_board.san(move)

    # Process the next 6 moves or until the capture chain ends
    for i, move in enumerate(moves):
        if temp_board.is_legal(move): # MAYBE REMOVE, CHECK BUT I THINK MIGHT NOT BE NECESSARY
            move_san = temp_board.san(move)
            if is_capture_move(move):
                capture_chain.append(move)  # Add to the capture chain
                captured_square = move.to_square
                captured_piece = temp_board.piece_at(captured_square)

                if captured_piece:
                    captured_symbol = captured_piece.symbol()
                    piece_counts[captured_symbol] = max(piece_counts.get(captured_symbol, 0) - 1, 0)

            temp_board.push(move)

        # Check if we need to extend past 6 moves (capture chain still active)
        if i == 5 and len(capture_chain) > 0:
            remaining_moves = moves[i + 1 :]
            capture_chain += remove_traded_pieces(temp_board, piece_counts, remaining_moves)
            break

    return piece_counts


def generate_named_endgame(piece_counts, traded_white_pieces, traded_black_pieces):
    """
    Generate a named endgame based on the pieces and trades.
    """
    if traded_white_pieces or traded_black_pieces:
        print(f"Piece trades detected: White traded {traded_white_pieces}, Black traded {traded_black_pieces}")

    # Example logic for generating the endgame type name based on the remaining pieces
    if sum(piece_counts.values()) <= 4:
        return "Endgame: Rook and Pawns"  # Placeholder for your classification logic

    return "unknown"


def generate_named_endgame(piece_counts):
    """
    Generates a descriptive endgame name based on the remaining pieces (excluding the king).
    Only the types of pieces are considered, no quantities or sides.
    """
    def piece_name(symbol):
        """
        Converts piece symbols to descriptive names.
        """
        names = {
            "K": "king", "Q": "queen", "R": "rook",
            "B": "bishop", "N": "knight", "P": "pawn",
            "k": "king", "q": "queen", "r": "rook",
            "b": "bishop", "n": "knight", "p": "pawn"
        }
        return names[symbol]

    # Set of non-king pieces (ignores quantities and sides)
    pieces = set()

    # Collect non-king pieces (exclude 'K' and 'k')
    for piece in piece_counts:
        if piece not in ['K', 'k']:  # Exclude king
            pieces.add(piece_name(piece))  # Add piece type (rook, bishop, etc.)

    # Sort pieces alphabetically and return as a comma-separated string
    return ", ".join(sorted(pieces))

def extract_date_components(date):
    """
    Extracts the day, month, and year from the date string in PGN format.
    Returns (day, month, year) as integers or None if the date is invalid.
    """
    try:
        year, month, day = map(int, date.split('.'))
        return day, month, year
    except (ValueError, AttributeError):
        return None, None, None


def processGames():
    with open("LichessGames/lichess_db_standard_rated_2013-01.pgn") as pgn:
        game_counter = 0
        valid_game_counter = 0
        game = chess.pgn.read_game(pgn)  # Read the first game

        while game:
            game_counter += 1  # Count all games
            print(f"Processing game {game_counter}...", flush=True)

            # Extract and clean opening name
            opening_name = game.headers.get("Opening")
            if not opening_name:
                print(f"Skipping game {game_counter}: Missing opening name")
                game = chess.pgn.read_game(pgn)  # Read the next game
                continue
            opening_name = clean_opening_name(opening_name)

            # Extract Elo ratings
            white_elo = game.headers.get("WhiteElo")
            black_elo = game.headers.get("BlackElo")
            try:
                white_elo = int(white_elo) if white_elo else None
                black_elo = int(black_elo) if black_elo else None
            except (TypeError, ValueError):
                print(f"Skipping game {game_counter}: Invalid Elo values")
                game = chess.pgn.read_game(pgn)  # Read the next game
                continue

            # Extract Event
            event = game.headers.get("Event", "Unknown Event")

            # Extract Date
            date = game.headers.get("UTCDate", "????.??.??")
            day, month, year = extract_date_components(date)

            # Result of the game
            result = game.headers.get("Result", "Unknown")

            # Classify the endgame
            endgame = classify_endgame_with_names(game)

            # Add game to the database
            try:
                cursor.execute(
                    """
                    INSERT INTO ChessGames (opening_name, WhiteElo, BlackElo, Event, Result, endgame, day, month, year)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
                    """,
                    (opening_name, white_elo, black_elo, event, result, endgame, day, month, year)
                )
                conn.commit()
                valid_game_counter += 1
            except mysql.connector.Error as e:
                print(f"Error adding game {game_counter} to database: {e}")

            # Read the next game
            game = chess.pgn.read_game(pgn)

        print(f"\nTotal games processed: {game_counter}")
        print(f"Total valid games added: {valid_game_counter}")

    # Close the database connection
    cursor.close()
    conn.close()

# Run the process
processGames()
